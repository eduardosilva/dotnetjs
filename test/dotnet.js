// Generated by CoffeeScript 1.9.1
(function() {
  Array.prototype.all = function(predicate) {
    var i, result;
    i = 0;
    result = true;
    while (i < this.length) {
      if (!predicate(this[i])) {
        result = false;
        break;
      }
      i++;
    }
    return result;
  };

  Array.prototype.any = function(predicate) {
    var i, result;
    result = false;
    if (!predicate) {
      result = this.length > 0;
    } else {
      i = 0;
      while (i < this.length) {
        if (predicate(this[i])) {
          result = true;
          break;
        }
        i++;
      }
    }
    return result;
  };

  Array.prototype.first = function(predicate) {
    var i, result;
    result = null;
    if (!predicate && this.any()) {
      result = this[0];
    } else {
      i = 0;
      while (i < this.length) {
        if (predicate(this[i])) {
          result = this[i];
          break;
        }
        i++;
      }
    }
    return result;
  };

  Array.prototype.forEach = function(action) {
    var arg, k, len1;
    for (k = 0, len1 = this.length; k < len1; k++) {
      arg = this[k];
      action(arg);
    }
  };

  Array.prototype.select = function(func) {
    var i, k, len1, results;
    results = [];
    for (k = 0, len1 = this.length; k < len1; k++) {
      i = this[k];
      results.push(func(i));
    }
    return results;
  };

  Array.prototype.selectMany = function(func) {
    var i, j, len, length, result, value;
    result = [];
    i = 0;
    length = this.length;
    while (i < length) {
      value = func(this[i]);
      if (Object.prototype.toString.call(value) === '[object Array]') {
        j = 0;
        len = value.length;
        while (j < len) {
          result.push(value[j++]);
        }
      }
      i++;
    }
    return result;
  };

  Array.prototype.where = function(predicate) {
    var i, result;
    result = [];
    i = 0;
    while (i < this.length) {
      if (predicate(this[i])) {
        result.push(this[i]);
      }
      i++;
    }
    return result;
  };

  Date.prototype.format = function(format) {
    var result;
    result = format;
    result = result.replace('dd', this.getDate().toString().padLeft(2, '0'));
    result = result.replace('d', this.getDate());
    result = result.replace('MM', (this.getMonth() + 1).toString().padLeft(2, '0'));
    result = result.replace('M', this.getMonth() + 1);
    result = result.replace('yyyy', this.getFullYear());
    result = result.replace('HH', this.getHours().toString().padLeft(2, '0'));
    result = result.replace('H', this.getHours());
    result = result.replace('mm', this.getMinutes().toString().padLeft(2, '0'));
    result = result.replace('m', this.getMinutes());
    result = result.replace('SS', this.getSeconds().toString().padLeft(2, '0'));
    result = result.replace('S', this.getSeconds());
    return result;
  };

  Date.now = function() {
    return new Date();
  };

  Date.today = function() {
    var now, today;
    now = new Date();
    today = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0, 0);
    return today;
  };

  Date.prototype.addDays = function(days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + days, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
  };

  Date.prototype.addMonths = function(months) {
    return new Date(this.getFullYear(), this.getMonth() + months, this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
  };

  String.prototype.padLeft = function(length, char) {
    return Array(length - this.length + 1).join(char || " ") + this;
  };

}).call(this);
